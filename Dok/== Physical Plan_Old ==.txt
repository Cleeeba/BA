== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Project [NgramId#4L, CASE WHEN isnotnull(Frequency_N#115[value#332]) THEN Frequency_N#115[value#332] ELSE 0 END AS Frequency_N#363L, CASE WHEN isnotnull(Frequency_L#141[value#332]) THEN Frequency_L#141[value#332] ELSE 0 END AS Frequency_L#381L, CASE WHEN isnotnull(Frequency_R#176[value#332]) THEN Frequency_R#176[value#332] ELSE 0 END AS Frequency_R#399L, value#332 AS Year#341]
   +- CartesianProduct
      :- Project [NgramId#4L, Frequency_N#115, Frequency_L#141, Frequency#151 AS Frequency_R#176]
      :  +- SortMergeJoin [RightChildNgramId#71L], [NgramId#150L], Inner
      :     :- Sort [RightChildNgramId#71L ASC NULLS FIRST], false, 0
      :     :  +- Exchange hashpartitioning(RightChildNgramId#71L, 200), ENSURE_REQUIREMENTS, [plan_id=1028]
      :     :     +- Project [NgramId#4L, RightChildNgramId#71L, Frequency_N#115, Frequency#122 AS Frequency_L#141]
      :     :        +- SortMergeJoin [LeftChildNgramId#42L], [NgramId#121L], Inner
      :     :           :- Sort [LeftChildNgramId#42L ASC NULLS FIRST], false, 0
      :     :           :  +- Exchange hashpartitioning(LeftChildNgramId#42L, 200), ENSURE_REQUIREMENTS, [plan_id=1020]
      :     :           :     +- Project [NgramId#4L, LeftChildNgramId#42L, RightChildNgramId#71L, Frequency#11 AS Frequency_N#115]
      :     :           :        +- SortMergeJoin [NgramId#4L], [NgramId#10L], Inner
      :     :           :           :- Sort [NgramId#4L ASC NULLS FIRST], false, 0
      :     :           :           :  +- Exchange hashpartitioning(NgramId#4L, 200), ENSURE_REQUIREMENTS, [plan_id=1012]
      :     :           :           :     +- Project [NgramId#4L, LeftChildNgramId#42L, RightChildNgramId#71L]
      :     :           :           :        +- SortMergeJoin [RightChildTokenIds#36], [Tokens#21], Inner
      :     :           :           :           :- Sort [RightChildTokenIds#36 ASC NULLS FIRST], false, 0
      :     :           :           :           :  +- Exchange hashpartitioning(RightChildTokenIds#36, 200), ENSURE_REQUIREMENTS, [plan_id=1004]
      :     :           :           :           :     +- Project [NgramId#4L, RightChildTokenIds#36, LeftChildNgramId#42L]
      :     :           :           :           :        +- SortMergeJoin [LeftChildTokenIds#31], [Tokens#21], Inner
      :     :           :           :           :           :- Sort [LeftChildTokenIds#31 ASC NULLS FIRST], false, 0
      :     :           :           :           :           :  +- Exchange hashpartitioning(LeftChildTokenIds#31, 200), ENSURE_REQUIREMENTS, [plan_id=989]
      :     :           :           :           :           :     +- Project [NgramId#4L, slice(Ngram#24, 1, (Length#27 - 1)) AS LeftChildTokenIds#31, slice(Ngram#24, 2, (Length#27 - 1)) AS RightChildTokenIds#36]
      :     :           :           :           :           :        +- Project [NgramId#4L, Tokens#21 AS Ngram#24, size(Tokens#21, true) AS Length#27]
      :     :           :           :           :           :           +- Filter (size(Tokens#21, true) > 1)
      :     :           :           :           :           :              +- ObjectHashAggregate(keys=[NgramId#4L], functions=[collect_list(TokenId#6L, 0, 0)])
      :     :           :           :           :           :                 +- Exchange hashpartitioning(NgramId#4L, 200), ENSURE_REQUIREMENTS, [plan_id=975]
      :     :           :           :           :           :                    +- ObjectHashAggregate(keys=[NgramId#4L], functions=[partial_collect_list(TokenId#6L, 0, 0)])
      :     :           :           :           :           :                       +- Project [NgramId#4L, TokenId#6L]
      :     :           :           :           :           :                          +- Sort [NgramId#4L ASC NULLS FIRST, Position#5 ASC NULLS FIRST], true, 0
      :     :           :           :           :           :                             +- Exchange rangepartitioning(NgramId#4L ASC NULLS FIRST, Position#5 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=970]
      :     :           :           :           :           :                                +- Filter isnotnull(NgramId#4L)
      :     :           :           :           :           :                                   +- FileScan parquet [NgramId#4L,Position#5,TokenId#6L] Batched: true, DataFilters: [isnotnull(NgramId#4L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/simhomes/binzc/data_transfer/parquets/contains.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(NgramId)], ReadSchema: struct<NgramId:bigint,Position:int,TokenId:bigint>
      :     :           :           :           :           +- Sort [Tokens#21 ASC NULLS FIRST], false, 0
      :     :           :           :           :              +- Exchange hashpartitioning(Tokens#21, 200), ENSURE_REQUIREMENTS, [plan_id=990]
      :     :           :           :           :                 +- ObjectHashAggregate(keys=[NgramId#45L], functions=[collect_list(TokenId#47L, 0, 0)])
      :     :           :           :           :                    +- Exchange hashpartitioning(NgramId#45L, 200), ENSURE_REQUIREMENTS, [plan_id=985]
      :     :           :           :           :                       +- ObjectHashAggregate(keys=[NgramId#45L], functions=[partial_collect_list(TokenId#47L, 0, 0)])
      :     :           :           :           :                          +- Project [NgramId#45L, TokenId#47L]
      :     :           :           :           :                             +- Sort [NgramId#45L ASC NULLS FIRST, Position#46 ASC NULLS FIRST], true, 0
      :     :           :           :           :                                +- Exchange rangepartitioning(NgramId#45L ASC NULLS FIRST, Position#46 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=980]
      :     :           :           :           :                                   +- Filter isnotnull(NgramId#45L)
      :     :           :           :           :                                      +- FileScan parquet [NgramId#45L,Position#46,TokenId#47L] Batched: true, DataFilters: [isnotnull(NgramId#45L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/simhomes/binzc/data_transfer/parquets/contains.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(NgramId)], ReadSchema: struct<NgramId:bigint,Position:int,TokenId:bigint>
      :     :           :           :           +- Sort [Tokens#21 ASC NULLS FIRST], false, 0
      :     :           :           :              +- Exchange hashpartitioning(Tokens#21, 200), ENSURE_REQUIREMENTS, [plan_id=1005]
      :     :           :           :                 +- ObjectHashAggregate(keys=[NgramId#74L], functions=[collect_list(TokenId#76L, 0, 0)])
      :     :           :           :                    +- Exchange hashpartitioning(NgramId#74L, 200), ENSURE_REQUIREMENTS, [plan_id=1000]
      :     :           :           :                       +- ObjectHashAggregate(keys=[NgramId#74L], functions=[partial_collect_list(TokenId#76L, 0, 0)])
      :     :           :           :                          +- Project [NgramId#74L, TokenId#76L]
      :     :           :           :                             +- Sort [NgramId#74L ASC NULLS FIRST, Position#75 ASC NULLS FIRST], true, 0
      :     :           :           :                                +- Exchange rangepartitioning(NgramId#74L ASC NULLS FIRST, Position#75 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=995]
      :     :           :           :                                   +- Filter isnotnull(NgramId#74L)
      :     :           :           :                                      +- FileScan parquet [NgramId#74L,Position#75,TokenId#76L] Batched: true, DataFilters: [isnotnull(NgramId#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/simhomes/binzc/data_transfer/parquets/contains.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(NgramId)], ReadSchema: struct<NgramId:bigint,Position:int,TokenId:bigint>
      :     :           :           +- Sort [NgramId#10L ASC NULLS FIRST], false, 0
      :     :           :              +- Exchange hashpartitioning(NgramId#10L, 200), ENSURE_REQUIREMENTS, [plan_id=1013]
      :     :           :                 +- Filter isnotnull(NgramId#10L)
      :     :           :                    +- FileScan parquet [NgramId#10L,Frequency#11] Batched: true, DataFilters: [isnotnull(NgramId#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/simhomes/binzc/data_transfer/parquets/data.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(NgramId)], ReadSchema: struct<NgramId:bigint,Frequency:map<int,bigint>>
      :     :           +- Sort [NgramId#121L ASC NULLS FIRST], false, 0
      :     :              +- Exchange hashpartitioning(NgramId#121L, 200), ENSURE_REQUIREMENTS, [plan_id=1021]
      :     :                 +- Filter isnotnull(NgramId#121L)
      :     :                    +- FileScan parquet [NgramId#121L,Frequency#122] Batched: true, DataFilters: [isnotnull(NgramId#121L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/simhomes/binzc/data_transfer/parquets/data.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(NgramId)], ReadSchema: struct<NgramId:bigint,Frequency:map<int,bigint>>
      :     +- Sort [NgramId#150L ASC NULLS FIRST], false, 0
      :        +- Exchange hashpartitioning(NgramId#150L, 200), ENSURE_REQUIREMENTS, [plan_id=1029]
      :           +- Filter isnotnull(NgramId#150L)
      :              +- FileScan parquet [NgramId#150L,Frequency#151] Batched: true, DataFilters: [isnotnull(NgramId#150L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/simhomes/binzc/data_transfer/parquets/data.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(NgramId)], ReadSchema: struct<NgramId:bigint,Frequency:map<int,bigint>>
      +- Scan ExistingRDD[value#332]